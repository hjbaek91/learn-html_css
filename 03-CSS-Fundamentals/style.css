/* -----CSS Theory #2: Inheritance and the Universal Selector */
/* inherited values does not change their values from their parent elements if they already have the same declaration */

/* selects every single element on the webpage (has lowest priority) */
/* useful for applying certain properties for all elements without getting inherited */
/* * {
  border-top: 10px solid #1098ad;
} */

/* globally resetting all the sizes within the webpage (used commonly when starting a project) */
/* this is useful because all the other selectors overwrite the '*' selector */
* {
  margin: 0;
  padding: 0;
}

/* the body selector passes down all the declared properties (usually for 'text' elements) */

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;
  border-top: 10px solid #1098ad;

  /* setting the position of the body element to 'relative' in order to apply 'absolute' positioning to the inner elements */
  position: relative;
}

.container {
  width: 700px;
  /* centered automatically */
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  /* shorthand method */
  padding: 20px 40px;
  margin-bottom: 60px;
}

nav {
  font-size: 18px;
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  /* padding-top: 50px;
  padding-bottom: 50px; */
  padding: 50px 0;
  width: 500px;
}

/* we can apply a CSS effect to various elements at the same time */

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-family: sans-serif;
  font-size: 20px;
  margin-bottom: 10px;
}

li:last-child {
  margin-bottom: 0;
}

/* 'p' element is the child element of the 'footer' element */
/* footer p {
  font-size: 16px;
} */

/* using 'class' and 'id' as selectors makes it easier to apply CSS on specific elements */
/* we mostly use 'class' in case there needs to be changes made in the future */
#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
}

/* using a 'pseudo-class' quickly selects elements as selectors */
/* 'li:first-child' selects each of the first 'li' child elements existing in HTML */
li:first-child {
  font-weight: bold;
}

/* 'li:last-child' selects each of the last 'li' child elements existing in HTML */
li:last-child {
  font-style: italic;
}

/* 'li:nth-child' specifically selects child elements manually (ex. number, odd, even) */
/* li:nth-child(2) {
  color: red;
} */

/* 'pseudo-classes' will not work well on descendant selectors because they do not categorize these classes by their specific elements */
article p:first-child {
  color: red;
}

/* Styling links (LVHA) */
/* targets all elements with 'href' attributes */
a:link {
  color: #1098ad;
  /* getting rid of underlines on links */
  text-decoration: none;
}

/* phase where links were clicked previously */
a:visited {
  color: #1098ad;
}

/* phase when the cursor is pointed on the link */
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

/* phase when the link is actually clicked */
a:active {
  background-color: black;
  font-style: italic;
}

/* NOTE: using chrome devtools can display how CSS effects are shown on the browser */

/* -----CSS Theory #1: Conflict Between Selectors----- */
/* If there are multiple selectors with the same CSS property, follow the higest-to-lowest 'priority' rule */
/* id <- class <- element <- universal(*) */

/* highest priority */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green;
} */

/* -----CSS Theory #3: The CSS Box Model----- */

/* Defines how elements are displayed on the webpage and how they are sized */

/* CONTENT: Text, images, etc. */
/* BORDER: A line around the element, still 'inside' of the element */
/* PADDING: Invisible space around the content, 'inside' of the element */
/* MARGIN: Space 'outside' of the element, between elements */
/* Fill Area: Area that gets filled with 'background color' or 'background image' */

.post-img {
  /* using '%' for sizing makes the image adapt to the size of the webpage */
  width: 100%;
  /* 'height: auto' overlaps the height specified on HTML */
  height: auto;
}

/* -----CSS Theory #4: Types of Boxes----- */

/* 1. Block-Level Elements */
/* - Elements are formateed visually as 'blocks' */
/* - Elements occupy '100% of parent element's width', no matter the content */
/* - Elements are 'stacked vertically' by default, one after another */
/* - the box-model 'applies as showed' earlier */

/* Default Elements: body, main, header, footer, section, nav, aside, div, h1-h6, p, ul, ol, li, etc. */
/* With CSS: 'display: block' */

/* 2. Inline Elements */
/* Occupies only the space 'necessary for its content' */
/* Causes 'no line-breaks' after or before the element */
/* Box model applies in a different way: 'heights and widths do not apply' */
/* 'Paddings and margins' are applied 'only horizontally' (left and right) */

/* Default Elements: a, img, strong, em, button, etc. */
/* With CSS: 'display: inline' */

/* 3. Inline-Block Elements */
/* - Looks like inline from the 'outside', behaves like block-level on the 'inside' */
/* - Occupies only content's space */
/* - Causes no line-breaks */
/* - Box-model applies as showed */

/* With CSS: 'display: inline-block' */

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;
  display: block; */
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

/* -----CSS Theory #5: Absolute Positioning----- */

/* 1. Normal Flow */
/* - Default positioning */
/* - Elements is 'in flow' */
/* - Elements are simply laid out according to their order in the HTML code */
/* --- */
/* position: relative */

/* 2. Absolute {ositioning */
/* - Element is removed from the normal flow: 'out of flow' */
/* - No impact on surrounding elements, might overlap them */
/* - We us top, bottom, left, or right to offset the element from its 'rlatively positioned container' */
/* --- */
/* position: absolute */

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  /* taking the element out of the normal flow */
  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

/* Pseudo-elements: elements that do not exist in HTML, but can still be selected and styled in CSS (ex. 1st letter of a word) */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* 'adjacent sibling' (element that come right after another sibling element) */
/* h3 + p::first-line {
  color: red;
} */

/* after/before pseudo-elements */
h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #000;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -15px;
  right: -45px;
}

/* Developer Skill #1: Googling and Reading Documentation */
/* - Googling what we do not know is common amongst developers, so don't feel bad! */

/* - Google related keywords */
/* - Find the most accurate information you need to solve your problem */
/* - There are various information on the internet, so only find the information that you need */
/* - Apply given solution to your project and observe the result */
/* - Some major websites: MDN, Stack Overflow */

/* --- */

/* Developer Skill #2: Debugging and Asking Questions */

/* DEBUGGING */
/* - Figure out where the bug first occurred */
/* - Check your code or use the devleloper tool for more detail (especially for bugs that are not visible) */
/* - Use the 'HTML validator tool' for checking HTML bugs */
/* - Use the 'diffchecker tool' to compare code */
/* - Fix the code and check your result */
/* - Avoid writing complex selectors as much as possible */
/* - Ask questions using developer platforms such as 'Stack Overflow' if you cannot solve the problem */
